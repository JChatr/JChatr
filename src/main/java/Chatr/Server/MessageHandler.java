package Chatr.Server;

import Chatr.Converstation.Message;
import Chatr.Helper.CONFIG;
import Chatr.Helper.JSONTransformer;

import java.util.ArrayList;
import java.util.List;

public class MessageHandler {
	private L1Cache l1Cache;
	private List<Request> requests;
	private List<String> answer = new ArrayList<>();

	/**
	 * needs connection to the Database as well as the all the sent messages
	 * from the client
	 *
	 * @param inCache
	 */
	protected MessageHandler(List<String> inCache) {
		this.l1Cache = Initializer.l1Cache;
		requests = parseRequests(inCache);
	}

	/**
	 * parses the requests and stores them for further processing
	 *
	 * @param inCache input from the Server
	 * @return parsed List of all the requests to the Server by the client
	 */
	private List<Request> parseRequests(List<String> inCache) {
		List<Request> requests = new ArrayList<>();
		for (String request : inCache) {
			String[] partials = request.split(CONFIG.SEPARATOR);
			Request req = new Request(partials[0], partials[1], partials[2]);
			requests.add(req);
		}
		return requests;
	}

	public void processRequests() {
		for (Request request : requests) {
			switch (request.getRequestType()) {
				case CREATE:
					create(request);
					break;
				case READ:
					read(request);
					break;
				case UPDATE:
					update(request);
					break;
				case DELETE:
					delete(request);
					break;
			}
		}
	}

	private void create(Request request) {
		Message m = request.getMessage();
		l1Cache.put(request.getConversationID(), m.getTime(), m);
	}

	/**
	 * @param request
	 */
	@SuppressWarnings("Unchecked")
	private void read(Request request) {
		Message m = request.getMessage();
		long timestamp = (m.isEmpty()) ? 0L : m.getTime();
		try {
			List<Message> newer = l1Cache.getNewer(request.getConversationID(), timestamp);
			if (!newer.isEmpty()) {
				l1Cache.print();
				System.out.println("newer = " + newer);
				answer.addAll(JSONTransformer.toJSON(newer));
			}
		} catch (Exception e) {
		}
	}

	/**
	 * @param request
	 */
	private void update(Request request) {

	}

	/**
	 * @param request
	 */
	private void delete(Request request) {

	}

	/**
	 * @return list of responses generated by the requests
	 */
	public List<String> getResponse() {
		return this.answer;
	}
}
