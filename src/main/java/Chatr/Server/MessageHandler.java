package Chatr.Server;

import Chatr.Converstation.Message;
import Chatr.Database.Database;
import Chatr.Helper.CONFIG;
import Chatr.Helper.JSONTransformer;

import java.util.ArrayList;
import java.util.List;

/**
 * server side message logic
 */
public class MessageHandler {
	private Database database;
	private List<Transmission> requests;
	private List<String> answer = new ArrayList<>();

	/**
	 * Instantiates the MessageHandler
	 * @param request request from the client
	 */
	protected MessageHandler(List<String> request) {
		this.database = Database.getCachedDatabase();
		requests = parseRequests(request);
	}

	/**
	 * parses the requests and stores them for further processing
	 * @param requests requests from the Client
	 * @return parsed List of all the requests to the server by the client
	 */
	private List<Transmission> parseRequests(List<String> requests) {
		List<Transmission> parsed = new ArrayList<>();
		for (String request : requests) {
			String[] partials = request.split(CONFIG.SEPARATOR);
			Transmission req = new Transmission(partials[0], partials[1], partials[2]);
			parsed.add(req);
		}
		return parsed;
	}

	/**
	 * Directs requests to the corresponding methods
	 */
	public void routeRequests() {
		for (Transmission request : requests) {
			switch (request.getRequestType()) {
				case CREATE:
					create(request);
					break;
				case READ:
					read(request);
					break;
				case UPDATE:
					update(request);
					break;
				case DELETE:
					delete(request);
					break;
			}
		}
	}

	/**
	 * stores Message in the Cache
	 * @param request Message wrapped in a request
	 */
	private void create(Transmission request) {
		Message m = request.getMessage();
		database.put(request.getConversationID(), m.getTime(), m);
	}

	/**
	 * Gets the newer Messages from the Cache
	 * @param request Message wrapped in a request
	 */
	@SuppressWarnings("Unchecked")
	private void read(Transmission request) {
		Message m = request.getMessage();
		long timestamp = (m.isEmpty()) ? 0L : m.getTime();
		try {
			List<Message> newer = database.getNewer(request.getConversationID(), timestamp);
			if (!newer.isEmpty()) {

				answer.addAll(JSONTransformer.toJSON(newer));
			}
		} catch (Exception e) {
		}
	}

	/**
	 * Updates a request in the Cache
	 * @param request Message wrapped in a request
	 */
	private void update(Transmission request) {

	}

	/**
	 * Deletes a Message from the Cache
	 * @param request Message wrapped in a request
	 */
	private void delete(Transmission request) {

	}

	/**
	 * Returns a list of all responses generated by the input requests
	 * @return list of responses generated by the requests
	 */
	public List<String> getResponse() {
		return this.answer;
	}
}
