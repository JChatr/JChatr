package Chatr.Server;

import Chatr.Model.Chat;
import Chatr.Model.Message;
import Chatr.Model.User;
import Chatr.Server.Database.Database;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * server side message logic
 */
public class MessageHandler {
	private Database database;
	private Transmission request;
	private Transmission response;
	private Notifier notifier;
	private Logger log = LogManager.getLogger(MessageHandler.class);


	/**
	 * Instantiates the MessageHandler
	 *
	 * @param request request from the client
	 */
	protected MessageHandler(Transmission request) {
		this.database = Database.getCachedDatabase();
		this.request = request;
		this.notifier = Notifier.getNotifier();
	}

	protected Transmission process() {
		log.trace("requests: " + request);
		routeRequests();
		log.trace("response: " + response);
		return getResponses();
	}

	/**
	 * Directs requests to the corresponding methods
	 */
	private void routeRequests() {

			switch (request.getRequestType()) {
				case MESSAGE:
					switch (request.getCRUD()) {
						case CREATE: {
							boolean status = database.addMessage(request.getConversationID(), request.getMessage());
							response= request.reset().setStatus(status);
							break;
						}
						case READ: {
							List<Message> m = database.readNewerMessages(request.getConversationID(),
									request.getTimestamp());
							response = request.reset().setMessages(m);
							break;
						}
						case UPDATE: {
							boolean status = database.updateMessage(request.getConversationID(), request.getMessage());
							response= request.reset().setStatus(status);
							break;
						}
						case DELETE: {
							boolean status = database.deleteMessage(request.getConversationID(),
									request.getMessage().getTime());
							response= request.reset().setStatus(status);
							break;
						}
					}
					break;
				case CONVERSATION:
					switch (request.getCRUD()) {
						case CREATE: {
							boolean status = database.addConversation(request.getConversationID(),
									request.getUserIDs());
							response = request.reset().setStatus(status);
							break;
						}
						case READ: {
							Set<Chat> c = database.readUserConversations(request.getUserID());
							response = request.reset().setChats(c);
							break;
						}
						case UPDATE: {
							boolean status = database.updateConversationUsers(request.getConversationID(), request.getUserIDs());
							response = request.reset().setStatus(status);
							break;
						}
						case DELETE: {
							boolean status = database.deleteConversation(request.getConversationID());
							response = request.reset().setStatus(status);
							break;
						}
					}
					break;
				case USER:
					switch (request.getCRUD()) {
						case CREATE: {
							boolean status = database.addUser(request.getUser());
							response = request.reset().setStatus(status);
							break;
						}
						case READ: {
							User user = database.readUser(request.getUserID());
							response = request.reset().setUser(user);
							break;
						}
						case UPDATE: {
							boolean status = database.updateUser(request.getUser());
							response= request.reset().setStatus(status);
							break;
						}
						case DELETE: {
							boolean status = database.deleteUser(request.getUserID());
							response = request.reset().setStatus(status);
							break;
						}
					}
					break;
				case USERS:
					switch (request.getCRUD()) {
						case READ:
							Set<User> users = database.readUsers();
							response = request.reset().setUsers(users);
							break;
					}
					break;
				case STATUS:
					break;

			}
	}

	/**
	 * Returns a list of all responses generated by the input requests
	 *
	 * @return list of responses generated by the requests
	 */
	private Transmission getResponses() {
		return this.response;
	}
}
